{
	"name": "Week8Exc1Tomi",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "819aa96f-c9f8-42c5-9a08-4fa524086533"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"High quality data: \n",
					"- no missing values in key fields (books loans etc)\n",
					"- correct municipality data\n",
					"- no duplicates\n",
					"- data is updated regularly\n",
					"- same formats\n",
					"- valid relations\n",
					"- columns and rows with correct information, types, IDs etc\n",
					"\n",
					"Metrics\n",
					"- % of missing values < 1%\n",
					"- zero duplicates\n",
					"- no invalid dates\n",
					"- no links to non-existing recordsOrphan records\n",
					"- date should be fresh\n",
					"- there should be rules for data, for example municipalities are from Finland etc.\n",
					"- all new datasets should have primary keys.\n",
					"- timestamps should follow ISO format (DD-MM-YYYY).\n",
					"- foreign key relationships must match existing data\n",
					"- minimum missing optional fields\n",
					"- schedule for updating data"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import col, count, when, isnan, max as spark_max, current_date, datediff\n",
					"from pyspark.sql.types import DateType\n",
					"\n",
					"# Start Spark session\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"# Load data from CSV\n",
					"loans = spark.read.option(\"header\", True).csv(\"abfss://x.csv\")\n",
					"municipalities = spark.read.option(\"header\", True).csv(\"abfss://x.csv\")\n",
					"libraries = spark.read.option(\"header\", True).csv(\"abfss://x.csv\")\n",
					"\n",
					"# Missing values (%)\n",
					"xxx\n",
					"\n",
					"# Duplicates\n",
					"xxx\n",
					"\n",
					"# Invalid date rows\n",
					"xxx\n",
					"\n",
					"# Orphan items\n",
					"xxx\n",
					"\n",
					"# Data freshness\n",
					"xxx\n",
					""
				],
				"execution_count": null
			}
		]
	}
}